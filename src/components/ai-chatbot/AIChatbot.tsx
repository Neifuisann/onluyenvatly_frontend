"use client";

import React, { useState, useRef, useEffect, useCallback } from 'react';
import { 
  ChatMessage, 
  ChatState, 
  MessageAction, 
  LessonContent,
  ToolMode,
  ToolName,
  ToolSuggestion,
  MessageType
} from '@/types/ai-chat';
import { aiChatClient } from '@/lib/api/ai-chat';
import './ai-chatbot.css';

interface AIChatbotProps {
  onContentInsert?: (text: string, position?: any) => void;
  onContentReplace?: (oldText: string, newText: string) => void;
  onTextHighlight?: (text: string) => void;
  onScrollToLine?: (line: number) => void;
  getLessonContent?: () => LessonContent;
}

export const AIChatbot: React.FC<AIChatbotProps> = ({
  onContentInsert,
  onContentReplace,
  onTextHighlight,
  onScrollToLine,
  getLessonContent
}) => {
  const [state, setState] = useState<ChatState>({
    isOpen: false,
    isMinimized: false,
    isProcessing: false,
    messages: [],
    currentToolMode: 'urlContext',
    googleSearchActive: false,
    lastActivatedTool: null
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const streamingMessageRef = useRef<string>('');

  // Scroll to bottom when new messages are added
  useEffect(() => {
    scrollToBottom();
  }, [state.messages]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ctrl/Cmd + Alt + A: Toggle chat
      if ((e.ctrlKey || e.metaKey) && e.altKey && e.key === 'a') {
        e.preventDefault();
        toggleChat();
      }

      // Escape: Close if open
      if (e.key === 'Escape' && state.isOpen) {
        closeChat();
      }

      // Quick tool shortcuts when chat is open
      if (state.isOpen && (e.ctrlKey || e.metaKey)) {
        switch (e.key) {
          case '1':
            e.preventDefault();
            activateTool('search');
            break;
          case '2':
            e.preventDefault();
            activateTool('edit');
            break;
          case '3':
            e.preventDefault();
            activateTool('add');
            break;
          case '4':
            e.preventDefault();
            activateTool('analyze');
            break;
          case '5':
            e.preventDefault();
            activateTool('google');
            break;
          case '6':
            e.preventDefault();
            toggleToolMode();
            break;
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [state.isOpen]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const toggleChat = () => {
    setState(prev => ({ ...prev, isOpen: !prev.isOpen }));
    if (!state.isOpen && inputRef.current) {
      setTimeout(() => inputRef.current?.focus(), 300);
    }
  };

  const closeChat = () => {
    setState(prev => ({ ...prev, isOpen: false }));
  };

  const toggleToolMode = () => {
    setState(prev => ({
      ...prev,
      currentToolMode: prev.currentToolMode === 'urlContext' ? 'codeExecution' : 'urlContext'
    }));

    const modeMessage = state.currentToolMode === 'urlContext' 
      ? 'üíª **Ch·∫ø ƒë·ªô Code Execution ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ:\n- Th·ª±c thi code Python ƒë·ªÉ t√≠nh to√°n\n- V·∫Ω ƒë·ªì th·ªã v√† bi·ªÉu ƒë·ªì\n- Gi·∫£i ph∆∞∆°ng tr√¨nh to√°n h·ªçc\n- T·∫°o m√¥ ph·ªèng v·∫≠t l√Ω\n- X·ª≠ l√Ω d·ªØ li·ªáu v√† th·ªëng k√™\n\nH√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn t√≠nh to√°n ho·∫∑c th·ª±c thi code g√¨!'
      : 'üîó **Ch·∫ø ƒë·ªô URL Context ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ:\n- ƒê·ªçc v√† ph√¢n t√≠ch n·ªôi dung t·ª´ c√°c URL\n- T√≥m t·∫Øt b√†i vi·∫øt v√† t√†i li·ªáu tr·ª±c tuy·∫øn\n- Tr√≠ch xu·∫•t th√¥ng tin t·ª´ trang web\n- Ph√¢n t√≠ch n·ªôi dung gi√°o d·ª•c\n\nH√£y cung c·∫•p URL ho·∫∑c y√™u c·∫ßu ph√¢n t√≠ch n·ªôi dung web!';

    addMessage('ai', modeMessage);
  };

  const activateTool = async (toolName: ToolName) => {
    setState(prev => ({ ...prev, lastActivatedTool: toolName }));

    // Visual feedback
    const button = document.querySelector(`[data-tool="${toolName}"]`);
    if (button && toolName !== 'google') {
      button.classList.add('active');
      setTimeout(() => button.classList.remove('active'), 3000);
    }

    switch (toolName) {
      case 'search':
        await activateSearchTool();
        break;
      case 'edit':
        await activateEditTool();
        break;
      case 'add':
        await activateAddTool();
        break;
      case 'analyze':
        await activateAnalyzeTool();
        break;
      case 'google':
        await activateGoogleTool();
        break;
      case 'toggle':
        toggleToolMode();
        break;
    }
  };

  const activateSearchTool = async () => {
    const lessonContent = getLessonContent ? getLessonContent() : { rawText: '', questions: [], metadata: {} };

    if (!lessonContent.rawText.trim()) {
      addMessage('ai', 'üîç **C√¥ng c·ª• t√¨m ki·∫øm**\n\nB√†i h·ªçc hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung ƒë·ªÉ t√¨m ki·∫øm. H√£y th√™m m·ªôt s·ªë c√¢u h·ªèi tr∆∞·ªõc!');
      return;
    }

    const searchSuggestions = generateSearchSuggestions(lessonContent);

    let message = 'üîç **C√¥ng c·ª• t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm:\n';
    message += '- C√¢u h·ªèi theo ch·ªß ƒë·ªÅ c·ª• th·ªÉ\n';
    message += '- C√¢u h·ªèi theo ƒë·ªô kh√≥\n';
    message += '- C√¥ng th·ª©c v√† kh√°i ni·ªám\n';
    message += '- L·ªói c·∫ßn s·ª≠a\n\n';

    if (searchSuggestions.length > 0) {
      message += '**G·ª£i √Ω t√¨m ki·∫øm d·ª±a tr√™n n·ªôi dung hi·ªán t·∫°i:**\n';
      searchSuggestions.forEach(suggestion => {
        message += `- ${suggestion}\n`;
      });
    }

    message += '\nH√£y cho t√¥i bi·∫øt b·∫°n mu·ªën t√¨m g√¨!';

    addMessage('ai', message);
    inputRef.current?.focus();
  };

  const activateEditTool = async () => {
    const lessonContent = getLessonContent ? getLessonContent() : { rawText: '', questions: [], metadata: {} };

    if (!lessonContent.rawText.trim()) {
      addMessage('ai', '‚úèÔ∏è **C√¥ng c·ª• ch·ªânh s·ª≠a**\n\nB√†i h·ªçc hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung ƒë·ªÉ ch·ªânh s·ª≠a. H√£y th√™m m·ªôt s·ªë c√¢u h·ªèi tr∆∞·ªõc!');
      return;
    }

    const improvements = analyzeForImprovements(lessonContent);

    let message = '‚úèÔ∏è **C√¥ng c·ª• ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n';
    message += '- C·∫£i thi·ªán c√¢u h·ªèi hi·ªán c√≥\n';
    message += '- S·ª≠a l·ªói ng·ªØ ph√°p v√† ch√≠nh t·∫£\n';
    message += '- ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥ c√¢u h·ªèi\n';
    message += '- Th√™m gi·∫£i th√≠ch chi ti·∫øt\n';
    message += '- C·∫£i thi·ªán c·∫•u tr√∫c c√¢u h·ªèi\n\n';

    if (improvements.length > 0) {
      message += '**T√¥i ph√°t hi·ªán m·ªôt s·ªë ƒëi·ªÉm c√≥ th·ªÉ c·∫£i thi·ªán:**\n';
      improvements.forEach((improvement, index) => {
        message += `${index + 1}. ${improvement}\n`;
      });
      message += '\n';
    }

    message += 'H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën ch·ªânh s·ª≠a g√¨ c·ª• th·ªÉ!';

    const actions: MessageAction[] = improvements.length > 0 ? [{
      type: 'highlight_text',
      label: 'ƒê√°nh d·∫•u v·∫•n ƒë·ªÅ ƒë·∫ßu ti√™n',
      icon: 'fas fa-search',
      data: { text: improvements[0].split(':')[0] }
    }] : [];

    addMessage('ai', message, actions);
    inputRef.current?.focus();
  };

  const activateAddTool = async () => {
    const lessonContent = getLessonContent ? getLessonContent() : { rawText: '', questions: [], metadata: {} };
    const suggestions = generateAddSuggestions(lessonContent);

    let message = '‚ûï **C√¥ng c·ª• th√™m n·ªôi dung ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ t·∫°o:\n';
    message += '- C√¢u h·ªèi m·ªõi theo ch·ªß ƒë·ªÅ c·ª• th·ªÉ\n';
    message += '- C√¢u h·ªèi v·ªõi ƒë·ªô kh√≥ ph√π h·ª£p\n';
    message += '- Bi·∫øn th·ªÉ c·ªßa c√¢u h·ªèi hi·ªán c√≥\n';
    message += '- C√¢u h·ªèi th·ª±c t·∫ø ·ª©ng d·ª•ng\n';
    message += '- C√¢u h·ªèi l√Ω thuy·∫øt c∆° b·∫£n\n\n';

    if (suggestions.length > 0) {
      message += '**D·ª±a tr√™n n·ªôi dung hi·ªán t·∫°i, t√¥i ƒë·ªÅ xu·∫•t th√™m:**\n';
      suggestions.forEach((suggestion, index) => {
        message += `${index + 1}. ${suggestion}\n`;
      });
      message += '\n';
    }

    message += 'H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën th√™m lo·∫°i c√¢u h·ªèi n√†o!';

    const actions: MessageAction[] = [
      {
        type: 'insert_text',
        label: 'Th√™m c√¢u h·ªèi tr·∫Øc nghi·ªám',
        icon: 'fas fa-list',
        data: {
          text: '\n\n// C√¢u h·ªèi m·ªõi\n1. [Nh·∫≠p c√¢u h·ªèi ·ªü ƒë√¢y]\nA. [ƒê√°p √°n A]\nB. [ƒê√°p √°n B]\nC. [ƒê√°p √°n C]\nD. [ƒê√°p √°n D]\nƒê√°p √°n: A\nGi·∫£i th√≠ch: [Nh·∫≠p gi·∫£i th√≠ch]',
          position: 'end'
        }
      }
    ];

    if (lessonContent.questions && lessonContent.questions.length > 0) {
      actions.push({
        type: 'insert_text',
        label: 'Th√™m bi·∫øn th·ªÉ c√¢u h·ªèi cu·ªëi',
        icon: 'fas fa-copy',
        data: {
          text: '\n\n// Bi·∫øn th·ªÉ c√¢u h·ªèi\n[S·∫Ω ƒë∆∞·ª£c t·∫°o d·ª±a tr√™n c√¢u h·ªèi cu·ªëi c√πng]',
          position: 'end'
        }
      });
    }

    addMessage('ai', message, actions);
    inputRef.current?.focus();
  };

  const activateAnalyzeTool = async () => {
    const lessonContent = getLessonContent ? getLessonContent() : { rawText: '', questions: [], metadata: {} };
    
    if (!lessonContent.rawText.trim()) {
      addMessage('ai', 'üìä **Ph√¢n t√≠ch b√†i h·ªçc**\n\nB√†i h·ªçc hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung. H√£y th√™m m·ªôt s·ªë c√¢u h·ªèi ƒë·ªÉ t√¥i c√≥ th·ªÉ ph√¢n t√≠ch!');
      return;
    }
    
    setState(prev => ({ ...prev, isProcessing: true }));
    
    try {
      const result = await aiChatClient.analyzeLesson(lessonContent);
      if (result.success && result.analysis) {
        addMessage('ai', result.analysis);
      } else {
        throw new Error(result.error || 'Analysis failed');
      }
    } catch (error) {
      addMessage('ai', 'Kh√¥ng th·ªÉ ph√¢n t√≠ch b√†i h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.', [], 'error');
    } finally {
      setState(prev => ({ ...prev, isProcessing: false }));
    }
  };

  const activateGoogleTool = async () => {
    setState(prev => ({ ...prev, googleSearchActive: !prev.googleSearchActive }));

    const message = state.googleSearchActive
      ? 'üîç **C√¥ng c·ª• t√¨m ki·∫øm Google ƒë√£ ƒë∆∞·ª£c t·∫Øt**\n\nT√¥i s·∫Ω kh√¥ng s·ª≠ d·ª•ng Google Search trong c√°c ph·∫£n h·ªìi ti·∫øp theo.'
      : 'üîç **C√¥ng c·ª• t√¨m ki·∫øm Google ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t**\n\nT√¥i c√≥ th·ªÉ t√¨m ki·∫øm th√¥ng tin tr√™n Google ƒë·ªÉ h·ªó tr·ª£ b·∫°n:\n\n- T√¨m ki·∫øm t√†i li·ªáu tham kh·∫£o v·ªÅ v·∫≠t l√Ω\n- T√¨m v√≠ d·ª• c√¢u h·ªèi t∆∞∆°ng t·ª±\n- T√¨m ki·∫øm c√¥ng th·ª©c v√† ƒë·ªãnh l√Ω\n- T√¨m h√¨nh ·∫£nh minh h·ªça\n- T√¨m video gi·∫£i th√≠ch\n\nH√£y cho t√¥i bi·∫øt b·∫°n mu·ªën t√¨m ki·∫øm g√¨ tr√™n Google!';

    addMessage('ai', message);
    inputRef.current?.focus();
  };

  const generateSearchSuggestions = (lessonContent: LessonContent): string[] => {
    const suggestions: string[] = [];
    const text = lessonContent.rawText.toLowerCase();

    const topics = [
      { keyword: 'ƒë·ªông l·ª±c', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ ƒë·ªông l·ª±c h·ªçc' },
      { keyword: 'nhi·ªát', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ nhi·ªát h·ªçc' },
      { keyword: 'ƒëi·ªán', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ ƒëi·ªán h·ªçc' },
      { keyword: 'quang', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ quang h·ªçc' },
      { keyword: 's√≥ng', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ s√≥ng' },
      { keyword: 'nguy√™n t·ª≠', suggestion: 'T√¨m c√¢u h·ªèi v·ªÅ v·∫≠t l√Ω nguy√™n t·ª≠' }
    ];

    topics.forEach(topic => {
      if (text.includes(topic.keyword)) {
        suggestions.push(topic.suggestion);
      }
    });

    if (lessonContent.questions && lessonContent.questions.length > 5) {
      suggestions.push('T√¨m c√¢u h·ªèi kh√≥ nh·∫•t');
      suggestions.push('T√¨m c√¢u h·ªèi d·ªÖ nh·∫•t');
    }

    if (text.includes('=') || text.includes('\\frac') || text.includes('\\sqrt')) {
      suggestions.push('T√¨m t·∫•t c·∫£ c√¥ng th·ª©c');
    }

    return suggestions.slice(0, 4);
  };

  const analyzeForImprovements = (lessonContent: LessonContent): string[] => {
    const improvements: string[] = [];
    const text = lessonContent.rawText;

    if (text.includes('??')) {
      improvements.push('C√≥ d·∫•u h·ªèi ch∆∞a ho√†n th√†nh (??)');
    }

    if (text.includes('TODO') || text.includes('todo')) {
      improvements.push('C√≥ ghi ch√∫ TODO ch∆∞a ho√†n th√†nh');
    }

    const lines = text.split('\n');
    lines.forEach((line) => {
      if (line.match(/^\d+\./) && !line.includes('?') && line.length < 20) {
        improvements.push(`C√¢u h·ªèi ${line.split('.')[0]} c√≥ v·∫ª ch∆∞a ho√†n th√†nh`);
      }
    });

    if (lessonContent.questions && lessonContent.questions.length > 0) {
      const questionsWithoutExplanation = lessonContent.questions.filter(q =>
        !q.explanation || q.explanation.trim().length < 10
      );

      if (questionsWithoutExplanation.length > 0) {
        improvements.push(`${questionsWithoutExplanation.length} c√¢u h·ªèi ch∆∞a c√≥ gi·∫£i th√≠ch chi ti·∫øt`);
      }
    }

    return improvements.slice(0, 5);
  };

  const generateAddSuggestions = (lessonContent: LessonContent): string[] => {
    const suggestions: string[] = [];
    const questionCount = lessonContent.questions ? lessonContent.questions.length : 0;

    if (questionCount === 0) {
      suggestions.push('C√¢u h·ªèi c∆° b·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu b√†i h·ªçc');
      suggestions.push('C√¢u h·ªèi ki·ªÉm tra ki·∫øn th·ª©c n·ªÅn t·∫£ng');
    } else if (questionCount < 5) {
      suggestions.push('Th√™m c√¢u h·ªèi ƒë·ªÉ ƒë·∫°t s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu (5-10 c√¢u)');
      suggestions.push('C√¢u h·ªèi v·ªõi ƒë·ªô kh√≥ tƒÉng d·∫ßn');
    } else if (questionCount >= 10) {
      suggestions.push('C√¢u h·ªèi th√°ch th·ª©c cho h·ªçc sinh gi·ªèi');
      suggestions.push('C√¢u h·ªèi ·ª©ng d·ª•ng th·ª±c t·∫ø');
    }

    if (lessonContent.rawText) {
      const text = lessonContent.rawText.toLowerCase();
      const topicSuggestions: { [key: string]: string } = {
        'ƒë·ªông l·ª±c': 'C√¢u h·ªèi v·ªÅ ƒë·ªãnh lu·∫≠t Newton v√† ·ª©ng d·ª•ng',
        'nhi·ªát': 'C√¢u h·ªèi v·ªÅ truy·ªÅn nhi·ªát v√† nhi·ªát dung',
        'ƒëi·ªán': 'C√¢u h·ªèi v·ªÅ m·∫°ch ƒëi·ªán v√† ƒë·ªãnh lu·∫≠t Ohm',
        'quang': 'C√¢u h·ªèi v·ªÅ kh√∫c x·∫° v√† ph·∫£n x·∫° √°nh s√°ng',
        's√≥ng': 'C√¢u h·ªèi v·ªÅ t·∫ßn s·ªë v√† b∆∞·ªõc s√≥ng'
      };

      Object.entries(topicSuggestions).forEach(([keyword, suggestion]) => {
        if (text.includes(keyword)) {
          suggestions.push(suggestion);
        }
      });
    }

    return suggestions.slice(0, 4);
  };

  const addMessage = (
    type: MessageType, 
    content: string, 
    actions?: MessageAction[], 
    status?: 'normal' | 'error' | 'warning' | 'info'
  ) => {
    const newMessage: ChatMessage = {
      id: `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      content,
      timestamp: new Date(),
      status: status || 'normal',
      actions
    };

    setState(prev => ({
      ...prev,
      messages: [...prev.messages, newMessage]
    }));
  };

  const checkForToolSuggestion = (message: string): ToolSuggestion | null => {
    const urlRegex = /(https?:\/\/[^\s]+)/gi;
    const hasUrls = urlRegex.test(message);

    if (hasUrls && state.currentToolMode === 'codeExecution') {
      return {
        type: 'tool-switch',
        from: 'Code Execution',
        to: 'URL Context',
        message: 'T√¥i ph√°t hi·ªán b·∫°n c√≥ URL trong tin nh·∫Øn. B·∫°n c√≥ mu·ªën chuy·ªÉn sang ch·∫ø ƒë·ªô URL Context ƒë·ªÉ ph√¢n t√≠ch n·ªôi dung web kh√¥ng?',
        action: 'switch-to-url-context'
      };
    }

    return null;
  };

  const handleSendMessage = async () => {
    const message = inputRef.current?.value.trim();
    if (!message || state.isProcessing) return;

    try {
      setState(prev => ({ ...prev, isProcessing: true }));

      // Add user message
      addMessage('user', message);

      // Clear input
      if (inputRef.current) {
        inputRef.current.value = '';
      }

      // Check for tool suggestion
      const suggestion = checkForToolSuggestion(message);
      if (suggestion) {
        addSuggestionMessage(suggestion);
        setState(prev => ({ ...prev, isProcessing: false }));
        return;
      }

      // Get current lesson content
      const lessonContent = getLessonContent ? getLessonContent() : { rawText: '', questions: [], metadata: {} };

      // Create streaming message placeholder
      const streamingMessageId = `msg-streaming-${Date.now()}`;
      const streamingMessage: ChatMessage = {
        id: streamingMessageId,
        type: 'ai',
        content: '',
        timestamp: new Date(),
        isStreaming: true
      };

      setState(prev => ({
        ...prev,
        messages: [...prev.messages, streamingMessage]
      }));

      // Send message with streaming
      streamingMessageRef.current = '';
      
      await aiChatClient.sendMessage(message, lessonContent, {
        stream: true,
        useGoogleSearch: state.googleSearchActive,
        toolMode: state.currentToolMode === 'codeExecution' ? 'code' : 'url',
        onChunk: (content) => {
          streamingMessageRef.current = content;
          setState(prev => ({
            ...prev,
            messages: prev.messages.map(msg =>
              msg.id === streamingMessageId
                ? { ...msg, content }
                : msg
            )
          }));
        }
      });

      // Finalize streaming message
      setState(prev => ({
        ...prev,
        messages: prev.messages.map(msg =>
          msg.id === streamingMessageId
            ? { ...msg, isStreaming: false }
            : msg
        )
      }));

    } catch (error) {
      console.error('Error sending message:', error);
      addMessage('ai', 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.', [], 'error');
    } finally {
      setState(prev => ({ ...prev, isProcessing: false }));
    }
  };

  const addSuggestionMessage = (suggestion: ToolSuggestion) => {
    const suggestionMessage: ChatMessage = {
      id: `msg-suggestion-${Date.now()}`,
      type: 'ai',
      content: suggestion.message,
      timestamp: new Date(),
      status: 'warning'
    };

    setState(prev => ({
      ...prev,
      messages: [...prev.messages, suggestionMessage]
    }));
  };

  const executeAction = async (action: MessageAction) => {
    try {
      switch (action.type) {
        case 'insert_text':
          if (onContentInsert && action.data.text) {
            onContentInsert(action.data.text, action.data.position);
            addMessage('ai', `‚úÖ ƒê√£ th·ª±c hi·ªán: ${action.label}`);
          }
          break;
        case 'replace_text':
          if (onContentReplace && action.data.oldText && action.data.newText) {
            onContentReplace(action.data.oldText, action.data.newText);
            addMessage('ai', `‚úÖ ƒê√£ th·ª±c hi·ªán: ${action.label}`);
          }
          break;
        case 'highlight_text':
          if (onTextHighlight && action.data.text) {
            onTextHighlight(action.data.text);
            addMessage('ai', `‚úÖ ƒê√£ th·ª±c hi·ªán: ${action.label}`);
          }
          break;
        case 'scroll_to':
          if (onScrollToLine && action.data.line) {
            onScrollToLine(action.data.line);
            addMessage('ai', `‚úÖ ƒê√£ th·ª±c hi·ªán: ${action.label}`);
          }
          break;
      }
    } catch (error) {
      console.error('Action execution failed:', error);
      addMessage('ai', `‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán: ${action.label}`, [], 'error');
    }
  };

  const formatMessage = (content: string): string => {
    let formatted = content;

    // Handle code blocks first (```code```)
    formatted = formatted.replace(/```([\s\S]*?)```/g, (_, code) => {
      const codeId = 'code-' + Math.random().toString(36).substring(2, 11);
      const trimmedCode = code.trim();
      return `<div class="code-block-container">
        <div class="code-block-header">
          <span class="code-block-label">Code</span>
          <button class="copy-code-btn" onclick="navigator.clipboard.writeText(document.getElementById('${codeId}').textContent).then(() => { this.innerHTML = '<i class=\\"fas fa-check\\"></i> Copied!'; this.classList.add('copied'); setTimeout(() => { this.innerHTML = '<i class=\\"fas fa-copy\\"></i> Copy'; this.classList.remove('copied'); }, 2000); })">
            <i class="fas fa-copy"></i> Copy
          </button>
        </div>
        <pre class="code-block" id="${codeId}"><code>${escapeHtml(trimmedCode)}</code></pre>
      </div>`;
    });

    // Handle headers
    formatted = formatted.replace(/^## (.*$)/gm, '<h3 class="message-header">$1</h3>');
    formatted = formatted.replace(/^# (.*$)/gm, '<h2 class="message-header">$1</h2>');

    // Handle bold and italic
    formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    formatted = formatted.replace(/\*(.*?)\*/g, '<em>$1</em>');

    // Handle inline code
    formatted = formatted.replace(/`([^`]+)`/g, '<code class="inline-code">$1</code>');

    // Handle bullet points
    formatted = formatted.replace(/^- (.*$)/gm, '<li>$1</li>');
    // Group consecutive li elements into ul - using [\s\S] instead of . with /s flag
    formatted = formatted.replace(/(<li>[\s\S]*?<\/li>)/, '<ul>$1</ul>');

    // Handle line breaks
    formatted = formatted.replace(/\n/g, '<br>');

    return formatted;
  };

  const escapeHtml = (text: string): string => {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  };

  return (
    <>
      {/* Chat Bubble */}
      <div
        className="ai-chat-bubble"
        onClick={toggleChat}
        aria-label="Toggle AI Chat"
        aria-expanded={state.isOpen}
        role="button"
      >
        <i className="fas fa-robot"></i>
      </div>

      {/* Chat Window */}
      <div
        className={`ai-chat-window ${state.isOpen ? 'open' : ''} ${state.isMinimized ? 'minimized' : ''}`}
        aria-hidden={!state.isOpen}
      >
        {/* Header */}
        <div className="chat-header">
          <div className="chat-header-title">
            <i className="fas fa-robot"></i>
            <span>AI Assistant</span>
          </div>
          <div className="chat-header-actions">
            <button
              className="header-btn"
              onClick={closeChat}
              aria-label="Close chat"
            >
              <i className="fas fa-times"></i>
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="chat-messages">
          {state.messages.map((message) => (
            <div key={message.id} className={`chat-message ${message.type}-message`}>
              <div className="message-avatar">
                <i className={message.type === 'ai' ? 'fas fa-robot' : 'fas fa-user'}></i>
              </div>
              <div className="message-content">
                <div
                  className={`message-text ${message.isStreaming ? 'streaming-text' : ''}`}
                  dangerouslySetInnerHTML={{ __html: formatMessage(message.content) }}
                />
                <div className="message-time">
                  {message.timestamp.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </div>
                {message.actions && message.actions.length > 0 && (
                  <div className="message-actions">
                    {message.actions.map((action, index) => (
                      <button
                        key={index}
                        className="action-btn"
                        onClick={() => executeAction(action)}
                      >
                        <i className={action.icon}></i> {action.label}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Tools */}
        <div className="chat-tools">
          <button
            className="tool-btn"
            data-tool="search"
            onClick={() => activateTool('search')}
            title="T√¨m ki·∫øm - Ph√≠m t·∫Øt: Ctrl+1"
          >
            <i className="fas fa-search"></i>
            <span>T√¨m ki·∫øm</span>
          </button>
          <button
            className="tool-btn"
            data-tool="edit"
            onClick={() => activateTool('edit')}
            title="Ch·ªânh s·ª≠a - Ph√≠m t·∫Øt: Ctrl+2"
          >
            <i className="fas fa-edit"></i>
            <span>Ch·ªânh s·ª≠a</span>
          </button>
          <button
            className="tool-btn"
            data-tool="add"
            onClick={() => activateTool('add')}
            title="Th√™m n·ªôi dung - Ph√≠m t·∫Øt: Ctrl+3"
          >
            <i className="fas fa-plus"></i>
            <span>Th√™m</span>
          </button>
          <button
            className="tool-btn"
            data-tool="analyze"
            onClick={() => activateTool('analyze')}
            title="Ph√¢n t√≠ch - Ph√≠m t·∫Øt: Ctrl+4"
          >
            <i className="fas fa-chart-bar"></i>
            <span>Ph√¢n t√≠ch</span>
          </button>
          <button
            className={`tool-btn ${state.googleSearchActive ? 'active' : ''}`}
            data-tool="google"
            onClick={() => activateTool('google')}
            title="Google Search - Ph√≠m t·∫Øt: Ctrl+5"
          >
            <i className="fab fa-google"></i>
            <span>Google</span>
          </button>
          <button
            className="tool-btn"
            data-tool="toggle"
            data-mode={state.currentToolMode}
            onClick={() => activateTool('toggle')}
            title="Chuy·ªÉn ƒë·ªïi: URL Context / Code Execution - Ph√≠m t·∫Øt: Ctrl+6"
          >
            <i className={state.currentToolMode === 'urlContext' ? 'fas fa-link' : 'fas fa-code'}></i>
            <span>{state.currentToolMode === 'urlContext' ? 'URL Context' : 'Code Execution'}</span>
          </button>
        </div>

        {/* Status */}
        <div className={`chat-status ${state.isProcessing ? 'processing' : ''}`}>
          <span className="status-text">
            {state.isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'S·∫µn s√†ng'}
          </span>
        </div>

        {/* Input */}
        <div className="chat-input-container">
          <div className="chat-input-wrapper">
            <textarea
              ref={inputRef}
              className="chat-input"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage();
                }
              }}
              disabled={state.isProcessing}
            />
            <button
              className="chat-send-btn"
              onClick={handleSendMessage}
              disabled={state.isProcessing || !inputRef.current?.value.trim()}
              aria-label="Send message"
            >
              <i className="fas fa-paper-plane"></i>
            </button>
          </div>
        </div>
      </div>
    </>
  );
};